<?php/* * 一些公用的控制器方法都放在这里 */namespace Model\Base;use Zend\Mvc\Controller\AbstractActionController;class BaseController extends AbstractActionController{    public $dbAdapter = null;    /**     * 获取DB Adapter，通常我们的模型类需要操作数据库，所以在构造时，需要传入     * @return Zend\Db\Adapter\Adapter     */    public function getDbAdapter(){        if (! $this->dbAdapter) {            $this->dbAdapter = $this->getEvent()->getApplication()->getServiceManager()->get('Zend\Db\Adapter\Adapter');        }        return $this->dbAdapter;    }    /**     * 获取随机字符串     *     * @param $length 所需要字符串的长度     * @return 生成的字符串     */    public function getRandChar($length,$type = 0){        $str = null;        $strPol = "ABCDEFGHKMNPQRSTUVWXYZ23456789abcdefghkmnpqrstuvwxyz";        if($type == 1){            $strPol = "0123456789";        }        $max = strlen($strPol) - 1;        for ($i = 0; $i < $length; $i ++) {            /* rand($min,$max)生成介于min和max两个数之间的一个随机整数 */            $str .= $strPol[rand(0, $max)];        }        return $str;    }    /**     * 参数校验     *     * @param $checkType 被校验参数的类型     * @param $checkContent 被校验的内容     * @return true 校验通过     *         false 校验不通过     */    public function checkMain($checkType, $checkContent){        try {            if (!isset($checkType) || !isset($checkContent)) {                return false;            }            $checkContent = trim($checkContent);            if($checkContent == ""){                return false;            }            switch ($checkType) {                case "key":                case "num":                    /* 1~11位数字*/                    $RegExp = '/^[\d]{1,11}$/';                    if($checkType == "key"){                        return preg_match($RegExp, $checkContent) && $checkContent > 0;                    }else{                        return preg_match($RegExp, $checkContent);                    }                case "name":                    /* 只含有汉字(包括汉字字符，例如：？《》)、数字、字母、下划线,并且不能以下划线开头和结尾*/                    $RegExp = '/^(?!_|\s\')[A-Za-z0-9_\x80-\xff\s\']+$/';                    return preg_match($RegExp, $checkContent);                case "userName":                    /* 由大小写字母跟数字组成并且长度在6-30字符*/                    $RegExp = '/^[a-zA-Z0-9_]{6,30}$/';                    return preg_match($RegExp, $checkContent);                case "password":                    /* 由大小写字母跟数字组成并且长度在6-16字符*/                    $RegExp = '/^[a-zA-Z0-9_]{6,16}$/';                    return preg_match($RegExp, $checkContent);                case "rolename":                    /* 由大小写字母组成并且长度在2-6字符*/                    $RegExp = '/^[a-zA-Z]{2,6}$/';                    return preg_match($RegExp, $checkContent);                case "telephone":                    /* 第一个数字是，第二个数字是3|4|5|6|7|8|9,后面跟着9个数字*/                    $RegExp = '/^1(3|4|5|6|7|8|9)\d{9}$/';                    return preg_match($RegExp, $checkContent);                case "homePhone":                    /* 校验家庭电话*/                    $RegExp = '/^(\(\d{3,4}\)|\d{3,4}-|\s)?\d{7,14}$/';                    return preg_match($RegExp, $checkContent);                case "symbol":                    /* 校验标志或代号，由大小写字母跟数字组成并且长度在1-6字符*/                    $RegExp = '/^[a-zA-Z0-9_]{1,6}$/';                    return preg_match($RegExp, $checkContent);                case "email":                    /* 邮箱*/                    $RegExp = '/^([0-9A-Za-z\\-_\\.]+)@([0-9a-z]+\\.[a-z]{2,3}(\\.[a-z]{2})?)$/i';                    return preg_match($RegExp, $checkContent);                case "selectNum":                    /* 1~8位数字*/                    $RegExp = '/^[\d]{1,8}$/';                    return preg_match($RegExp, $checkContent);                case "color":                    /*颜色*/                    $RegExp = "/^([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/";                    return preg_match($RegExp, $checkContent);                case "boolNum":                    return !($checkContent != 0 && $checkContent != 1);                case "date":                    return strtotime(date('Y-m-d', strtotime($checkContent))) === strtotime($checkContent);                default:                    /* 传入字符串内有其它非法字段*/                    return false;            }        } catch (\Exception $e) {            return false;        }    }    /**     * 验证身份证号     * @param $vStr     * @return bool     */    //验证身份证是否有效    public function validateIDCard($IDCard) {        if (strlen($IDCard) == 18) {            return $this->check18IDCard($IDCard);        } elseif ((strlen($IDCard) == 15)) {            $IDCard = $this->convertIDCard15to18($IDCard);            return $this->check18IDCard($IDCard);        } else {            return false;        }    }    //计算身份证的最后一位验证码,根据国家标准GB 11643-1999    private function calcIDCardCode($IDCardBody) {        if (strlen($IDCardBody) != 17) {            return false;        }        //加权因子        $factor = array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);        //校验码对应值        $code = array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');        $checksum = 0;        for ($i = 0; $i < strlen($IDCardBody); $i++) {            $checksum += substr($IDCardBody, $i, 1) * $factor[$i];        }        return $code[$checksum % 11];    }    // 将15位身份证升级到18位    private function convertIDCard15to18($IDCard) {        if (strlen($IDCard) != 15) {            return false;        } else {            // 如果身份证顺序码是996 997 998 999，这些是为百岁以上老人的特殊编码            if (array_search(substr($IDCard, 12, 3), array('996', '997', '998', '999')) !== false) {                $IDCard = substr($IDCard, 0, 6) . '18' . substr($IDCard, 6, 9);            } else {                $IDCard = substr($IDCard, 0, 6) . '19' . substr($IDCard, 6, 9);            }        }        $IDCard = $IDCard . $this->calcIDCardCode($IDCard);        return $IDCard;    }    // 18位身份证校验码有效性检查    private function check18IDCard($IDCard) {        if (strlen($IDCard) != 18) {            return false;        }        $IDCardBody = substr($IDCard, 0, 17); //身份证主体        $IDCardCode = strtoupper(substr($IDCard, 17, 1)); //身份证最后一位的验证码        if ($this->calcIDCardCode($IDCardBody) != $IDCardCode) {            return false;        } else {            return true;        }    }    /**     * 获取客户端真实IP     */    public function getClientIP(){        if(!empty($_SERVER["HTTP_CLIENT_IP"]))        {            $cip = $_SERVER["HTTP_CLIENT_IP"];        }        else if(!empty($_SERVER["HTTP_X_FORWARDED_FOR"]))        {            $cip = $_SERVER["HTTP_X_FORWARDED_FOR"];        }        else if(!empty($_SERVER["REMOTE_ADDR"]))        {            $cip = $_SERVER["REMOTE_ADDR"];        }        else        {            $cip = '';        }        preg_match("/[\d\.]{7,15}/", $cip, $cips);        $cip = isset($cips[0]) ? $cips[0] : 'unknown';        unset($cips);        return $cip;    }    /**     * 根据十六进制颜色值 获取RGB值     */    function hex2rgb($hexColor) {        if (strlen($hexColor) > 3) {            $rgb = array(                'r' => hexdec(substr($hexColor, 0, 2)),                'g' => hexdec(substr($hexColor, 2, 2)),                'b' => hexdec(substr($hexColor, 4, 2))            );        } else {            $r = substr($hexColor, 0, 1) . substr($hexColor, 0, 1);            $g = substr($hexColor, 1, 1) . substr($hexColor, 1, 1);            $b = substr($hexColor, 2, 1) . substr($hexColor, 2, 1);            $rgb = array(                'r' => hexdec($r),                'g' => hexdec($g),                'b' => hexdec($b)            );        }        return $rgb;    }    /**     * 拷贝文件的函数     * $res 被复制的资源     * $dir 拷贝目录     * $des 拷贝路径     */    function CopyFunc($res, $dir,$des) {        if(file_exists($res)) {            $r_fp=fopen($res,"r");            if(!file_exists($dir)) {                //可创建多级目录                mkdir($dir,0777,true);            }            $d_fp=fopen($des,"w+");            //边读边写            $buffer=1024;            $fres="";            while(!feof($r_fp)) {                $fres=fread($r_fp,$buffer);                fwrite($d_fp,$fres);            }            fclose($r_fp);            fclose($d_fp);           return array('result'=>true,'msg'=>"拷贝成功");        } else {           return array('result'=>false,'msg'=>"源文件不存在");        }    }    //检测网络是否连接    function varify_url($url){        $check = @fopen($url,"r");        if($check){            $status = true;        }else{            $status = false;        }        return $status;    }        //返回HTTP响应码    function httpcode($url){        $ch = curl_init();        $timeout = 1;        curl_setopt($ch,CURLOPT_FOLLOWLOCATION,1);        curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);        curl_setopt($ch, CURLOPT_HEADER, 1);        curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);        curl_setopt($ch,CURLOPT_URL,$url);        curl_exec($ch);        $httpcode = curl_getinfo($ch,CURLINFO_HTTP_CODE);        curl_close($ch);        return $httpcode;    }}